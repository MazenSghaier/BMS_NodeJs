/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryVoucher } from "./DeliveryVoucher";
import { DeliveryVoucherCountArgs } from "./DeliveryVoucherCountArgs";
import { DeliveryVoucherFindManyArgs } from "./DeliveryVoucherFindManyArgs";
import { DeliveryVoucherFindUniqueArgs } from "./DeliveryVoucherFindUniqueArgs";
import { CreateDeliveryVoucherArgs } from "./CreateDeliveryVoucherArgs";
import { UpdateDeliveryVoucherArgs } from "./UpdateDeliveryVoucherArgs";
import { DeleteDeliveryVoucherArgs } from "./DeleteDeliveryVoucherArgs";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { Order } from "../../order/base/Order";
import { DeliveryVoucherService } from "../deliveryVoucher.service";
@graphql.Resolver(() => DeliveryVoucher)
export class DeliveryVoucherResolverBase {
  constructor(protected readonly service: DeliveryVoucherService) {}

  async _deliveryVouchersMeta(
    @graphql.Args() args: DeliveryVoucherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryVoucher])
  async deliveryVouchers(
    @graphql.Args() args: DeliveryVoucherFindManyArgs
  ): Promise<DeliveryVoucher[]> {
    return this.service.deliveryVouchers(args);
  }

  @graphql.Query(() => DeliveryVoucher, { nullable: true })
  async deliveryVoucher(
    @graphql.Args() args: DeliveryVoucherFindUniqueArgs
  ): Promise<DeliveryVoucher | null> {
    const result = await this.service.deliveryVoucher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryVoucher)
  async createDeliveryVoucher(
    @graphql.Args() args: CreateDeliveryVoucherArgs
  ): Promise<DeliveryVoucher> {
    return await this.service.createDeliveryVoucher({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DeliveryVoucher)
  async updateDeliveryVoucher(
    @graphql.Args() args: UpdateDeliveryVoucherArgs
  ): Promise<DeliveryVoucher | null> {
    try {
      return await this.service.updateDeliveryVoucher({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryVoucher)
  async deleteDeliveryVoucher(
    @graphql.Args() args: DeleteDeliveryVoucherArgs
  ): Promise<DeliveryVoucher | null> {
    try {
      return await this.service.deleteDeliveryVoucher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Invoice], { name: "invoices" })
  async findInvoices(
    @graphql.Parent() parent: DeliveryVoucher,
    @graphql.Args() args: InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    const results = await this.service.findInvoices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  async getOrder(
    @graphql.Parent() parent: DeliveryVoucher
  ): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
