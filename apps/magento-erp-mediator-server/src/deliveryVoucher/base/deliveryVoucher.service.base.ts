/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DeliveryVoucher as PrismaDeliveryVoucher,
  Invoice as PrismaInvoice,
  Order as PrismaOrder,
} from "@prisma/client";

export class DeliveryVoucherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryVoucherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryVoucher.count(args);
  }

  async deliveryVouchers(
    args: Prisma.DeliveryVoucherFindManyArgs
  ): Promise<PrismaDeliveryVoucher[]> {
    return this.prisma.deliveryVoucher.findMany(args);
  }
  async deliveryVoucher(
    args: Prisma.DeliveryVoucherFindUniqueArgs
  ): Promise<PrismaDeliveryVoucher | null> {
    return this.prisma.deliveryVoucher.findUnique(args);
  }
  async createDeliveryVoucher(
    args: Prisma.DeliveryVoucherCreateArgs
  ): Promise<PrismaDeliveryVoucher> {
    return this.prisma.deliveryVoucher.create(args);
  }
  async updateDeliveryVoucher(
    args: Prisma.DeliveryVoucherUpdateArgs
  ): Promise<PrismaDeliveryVoucher> {
    return this.prisma.deliveryVoucher.update(args);
  }
  async deleteDeliveryVoucher(
    args: Prisma.DeliveryVoucherDeleteArgs
  ): Promise<PrismaDeliveryVoucher> {
    return this.prisma.deliveryVoucher.delete(args);
  }

  async findInvoices(
    parentId: string,
    args: Prisma.InvoiceFindManyArgs
  ): Promise<PrismaInvoice[]> {
    return this.prisma.deliveryVoucher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoices(args);
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.deliveryVoucher
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }
}
