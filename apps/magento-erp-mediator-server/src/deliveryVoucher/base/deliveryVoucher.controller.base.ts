/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryVoucherService } from "../deliveryVoucher.service";
import { DeliveryVoucherCreateInput } from "./DeliveryVoucherCreateInput";
import { DeliveryVoucher } from "./DeliveryVoucher";
import { DeliveryVoucherFindManyArgs } from "./DeliveryVoucherFindManyArgs";
import { DeliveryVoucherWhereUniqueInput } from "./DeliveryVoucherWhereUniqueInput";
import { DeliveryVoucherUpdateInput } from "./DeliveryVoucherUpdateInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";

export class DeliveryVoucherControllerBase {
  constructor(protected readonly service: DeliveryVoucherService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryVoucher })
  async createDeliveryVoucher(
    @common.Body() data: DeliveryVoucherCreateInput
  ): Promise<DeliveryVoucher> {
    return await this.service.createDeliveryVoucher({
      data: {
        ...data,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        creationDate: true,
        customerInfo: true,
        details: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryVoucher] })
  @ApiNestedQuery(DeliveryVoucherFindManyArgs)
  async deliveryVouchers(
    @common.Req() request: Request
  ): Promise<DeliveryVoucher[]> {
    const args = plainToClass(DeliveryVoucherFindManyArgs, request.query);
    return this.service.deliveryVouchers({
      ...args,
      select: {
        createdAt: true,
        creationDate: true,
        customerInfo: true,
        details: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryVoucher(
    @common.Param() params: DeliveryVoucherWhereUniqueInput
  ): Promise<DeliveryVoucher | null> {
    const result = await this.service.deliveryVoucher({
      where: params,
      select: {
        createdAt: true,
        creationDate: true,
        customerInfo: true,
        details: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryVoucher(
    @common.Param() params: DeliveryVoucherWhereUniqueInput,
    @common.Body() data: DeliveryVoucherUpdateInput
  ): Promise<DeliveryVoucher | null> {
    try {
      return await this.service.updateDeliveryVoucher({
        where: params,
        data: {
          ...data,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          creationDate: true,
          customerInfo: true,
          details: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryVoucher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryVoucher(
    @common.Param() params: DeliveryVoucherWhereUniqueInput
  ): Promise<DeliveryVoucher | null> {
    try {
      return await this.service.deleteDeliveryVoucher({
        where: params,
        select: {
          createdAt: true,
          creationDate: true,
          customerInfo: true,
          details: true,
          id: true,

          order: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: DeliveryVoucherWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,
        createdAt: true,
        creationDate: true,

        deliveryVoucher: {
          select: {
            id: true,
          },
        },

        id: true,
        invoiceNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  async connectInvoices(
    @common.Param() params: DeliveryVoucherWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateDeliveryVoucher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  async updateInvoices(
    @common.Param() params: DeliveryVoucherWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateDeliveryVoucher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  async disconnectInvoices(
    @common.Param() params: DeliveryVoucherWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateDeliveryVoucher({
      where: params,
      data,
      select: { id: true },
    });
  }
}
